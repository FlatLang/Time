package flat/time

/// Class that represents a time interval. The start and end DateTimes indicate
/// the start and end of the time interval. A null value for the start DateTime
/// represents "from the beginning of time", while a null value for the end
/// DateTime represents "to the end of time".
class Interval {
  public DateTime start
  public DateTime end

  visible Long days => (end.millis - start.millis) / DateTime.SECS_DAY

  visible Long hours => (end.millis - start.millis) / DateTime.SECS_HOUR
  visible Int remainingHours => (Int)(hours % 24)

  visible Long minutes => (end.millis - start.millis) / DateTime.SECS_MINUTE
  visible Int remainingMinutes => (Int)(minutes % 60)

  visible Long seconds => (end.millis - start.millis) / 1000
  visible Int remainingSeconds => (Int)(seconds % 60)

  visible Long milliseconds => end.millis - start.millis
  visible Int remainingMilliseconds => (Int)(milliseconds % 1000)

  visible Int months {
    get {
      var Int months = 0

      let current = DateTime(end)

      while (start.year != current.year || start.month != current.month) {
        current.subtractMonth()
        months++
      }

      return months
    }
  }

  visible Int remainingMonths => months % 12

  visible Int years {
    get {
      var Int years = 0

      let current = DateTime(end)

      while (start.year != current.year) {
        current.subtractYear()
        years++
      }

      return years
    }
  }

  public construct(DateTime start = null, DateTime end = null) {
    if (start == null || end == null) {
      return BoundlessInterval(start, end)
    } else {
      return BoundedInterval(start, end)
    }
  }

  public getGap(Interval other) -> Interval {
    if (end <= other.start) return BoundedInterval(end, other.start)
    else if (start >= other.end) return BoundedInterval(other.end, start)
    else throw NoGapException(this, other)
  }

  public toString() => "Interval [#start, #end]"

  class IntervalException extends Exception {
    public construct(String message) => super(message)
  }

  class InvalidIntervalException extends IntervalException {
    public construct(String message) => super(message)
  }

  class NoGapException extends IntervalException {
    public construct(Interval first, Interval second) => super("Cannot get a gap from overlapping Intervals #first and #second")
  }
}